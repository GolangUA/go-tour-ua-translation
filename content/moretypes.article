Додаткові типи: структури, зрізи та карти.
Навчіться визначати типи на основі вже існуючих: в цьому уроці розглядаються структури (англ. structs), масиви (англ. arrays), зрізи (англ. slices) та карти (англ. maps).

Автори Go
https://golang.org

* Вказнівники (англ. pointers)

В Go є вказівники (також використовуються терміни "поінтери" та "покажчики").
Вказівник містить адресу пам'яті значення.

Тип *T є вказівником на значення типу T. Його нульове значення nil.

	var p *int

Оператор `&` генерує вказівник на свій операнд.

	i := 42
	p = &i

Оператор `*` відображає значення, на яке посилається вказівник.

	fmt.Println(*p) // читання i через вказівник p
	*p = 21         // задати i через вказівник p

Це відомо як розіменування (англ. dereferencing).

На відміну від C, Go не має арифметики вказівників.

.play moretypes/pointers.go

* Структури (англ. structs)

Структура `struct` це набір полів.

.play moretypes/structs.go

* Поля структури

Доступ до полів структури здійснюється за допомогою крапки.

.play moretypes/struct-fields.go

* Вказівник на структури

Доступ до полів структури можна отримати через вказівник структури.

Щоб отримати доступ до поля `X` структури, коли ми маємо вказівник структури `p`, ми можемо 
написати `(*p).X`.
Однак ця нотація є громіздкою, тому мова дозволяє нам натомість писати лише `p.X` без явного 
розіменування.

.play moretypes/struct-pointers.go

* Літерали структури

Літерал структури позначає щойно виділене значення структури шляхом переліку значень її полів.

Ви можете перерахувати лише підмножину полів, використовуючи синтаксис `Name:`. (І порядок іменованих полів не має значення.)

Спеціальний префікс `&` повертає вказівник на значення структури.

.play moretypes/struct-literals.go


* Масиви (англ. arrays)

Тип `[n]T` — це масив із `n` значень типу `T`.

Вираз

	var a [10]int

оголошує змінну `a` як масив із десяти цілих чисел.

Довжина масиву є частиною його типу, тому розмір масиву не можна змінити.
Це здається обмеженим, але не хвилюйтеся;
Go забезпечує зручний спосіб роботи з масивами.

.play moretypes/array.go


* Зрізи (англ. slices)

Масив має фіксований розмір.
З іншого боку, зріз — це гнучке представлення елементів 
масиву динамічного розміру.
На практиці зрізи зустрічаються набагато частіше, ніж масиви.

Тип `[]T` є зрізом з елементами типу `T`.

Зріз формується шляхом зазначення двох індексів, нижньої 
та верхньої меж, розділених двокрапкою:

	a[нижня : верхня]

Цей вираз вибирає напіввідкритий діапазон, який включає перший 
елемент, але не включає останній.

Наступний вираз створює фрагмент, який включає елементи з 1 по 3 масиву 'a':

	a[1:4]

.play moretypes/slices.go


* Зрізи схожі на вказівники на масиви

Зріз не зберігає жодних даних,
він просто описує розділ основного масиву.

Зміна елементів зрізу змінює відповідні
елементи його основного масиву.

Інші зрізи, які мають той самий базовий масив, побачать ці зміни.

.play moretypes/slices-pointers.go


* Літерали зрізів

Літерал зрізу схожий на літерал масиву без довжини.

Це літерал масиву:

	[3]bool{true, true, false}

Настпуний вираз створює той самий масив, що й вище, а 
потім будує зріз, який посилається на нього:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Зріз за замовчуваням

Під час створення зрізу ви можете не зазначати верхню або нижню межі, щоб замість них використовувати стандартні значення.

За замовчуванням для нижньої межі встановлено нуль, а для верхньої – довжина зрізу.

Для масиву

	var a [10]int

ці вирази зрізу еквівалентні:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Довжина і ємність зрізу

Зріз має як _довжину_, так і _ємність_.

Довжина зрізу (англ. length) - це кількість елементів, які він містить.

Ємність зрізу (англ. capacity) — це кількість елементів у базовому масиві,
починаючи з першого елемента фрагмента.

Довжину та ємність зрізу `s` можна отримати за допомогою виразів 
`len(s)` і `cap(s)`.

Ви можете збільшити довжину зрізу, зробивши зріз повторно, 
за умови, що він має достатню ємність. 
Спробуйте змінити одну з операцій зрізу в прикладі програми, щоб розширити його 
за межі його можливостей, і подивіться, що станеться.

.play moretypes/slice-len-cap.go


* Нульові зрізи

Нульове значення зрізу дорівнює nil.

Нульовий фрагмент має довжину та ємність 0
і не має під собою масиву.

.play moretypes/nil-slices.go


* Створення зрізу за допомогою make

Зрізи можна створювати за допомогою вбудованої функції `make`;
таким чином ви створюєте масиви динамічного розміру.

Функція `make` виділяє обнулений масив 
і повертає зріз, який посилається на цей масив:

	a := make([]int, 5)  // len(a)=5

Щоб указати ємність, передайте третій аргумент функції `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Зрізи зрізів

Зрізи можуть вміщати будь-який тип, включаючи інші зрізи

.play moretypes/slices-of-slice.go


* Додавання до зрізу

Зазвичай до зрізу додаються нові елементи, тому Go надає вбудовану
функцію `append`. [[/pkg/builtin/#append][Документація]]
вбудованого пакета описує `append`.

	func append(s []T, vs ...T) []T

Перший параметр `s` функції `append` це зріз типу `T`, а решта - це значення
`T`, які необхідно додати до зрізу.

Отримане значення функції `append` це зріз, який вміщає всі елементи
вихідного зрізу плюс додані значення.

Якщо масив, на який посилається зріз `s` занадто малий, щоб вмістити додані елементи, виділяється 
більший масив. Зріз, який повертається функцією, буде посилатись на щойно виділений 
масив.

(Щоб дізнатись більше про зрізи, прочитайте статтю [[/blog/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go


* Діапазон (англ. range)

Форма `range` з циклу `for` дозволяє пройти (ітерутватись) по елементам зрізу чи мапи.

Під час застосування `range` до зрізу для кожної ітерації повертаються два значення.
Перше — це індекс, а друге — копія елемента за цим індексом.

.play moretypes/range.go

* Діапазон: продовження

Ви можете пропустити індекс або значення, вказавши `_` замість змінної.

    for i, _ := range pow
    for _, value := range pow

Якщо вам потрібен лише індекс, ви можете опустити другу змінну.

    for i := range pow

.play moretypes/range-continued.go

* Вправа: зрізи

Реалізуйте функцію `Pic`. Вона повинна повертати відрізок довжини `dy`, кожен елемент якого є відрізком `dx` 8-бітних цілих беззнакових чисел. Коли ви запустите програму, вона виведе на екран ваше зображення, інтерпретуючи цілі числа як значення у відтінках сірого (ну, або синього).

Вибір зображення залишається за вами. Цікавими функціями є `(x+y)/2`, `x*y` та `x^y`.

(Для виділення кожного `[]uint8` всередині `[][]uint8` потрібно використовувати цикл).

(Використовуйте `uint8(intValue)` для конвертації між типами.)

.play moretypes/exercise-slices.go

* Мапи (англ. maps)

Мапа (карта або хеш-таблиця) відображає ключі на значення.

Нульовим значенням мапи є `nil`.
Така мапа не має ключів і в неї не можна їх додавати.

Функція `make` повертає мапу заданого типу, 
ініціалізовану та готову до використання.

.play moretypes/maps.go

* Літерали мап

Літерали мапи подібні до структурних літералів, але з обов'язковим використанням ключів.

.play moretypes/map-literals.go

* Літерали мап (продовження)

Якщо тип верхнього рівня є просто ім'ям типу, то його можна не включати в елементи літералу.

.play moretypes/map-literals-continued.go

* Зміна мап

Вставка або оновлення елементу в мапі `m`:

	m[key] = elem

Отримати елемент:

	elem = m[key]

Видалити елемент:

	delete(m, key)

Перевірити наявність ключа з допомогою присвоєння двох значень:

	elem, ok = m[key]

Якщо `key` є в `m`, то `ok` рівне `true`. Якщо ні, то `ok` рівне `false`.

Якщо `key` відсутній у мапі, то `elem` є нульовим значенням для типу елементу мапи.

*Зауваження:* якщо `elem` або `ok` ще не були оголошені, можна використати коротку форму оголошення:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Вправа: Мапи

Реалізуйте функцію `WordCount`.  Вона повинна повертати мапу підрахунку кожного "слова" у рядку `s`. Функція `wc.Test` виконує набір тестів для заданої функції і виводить успіх або невдачу.

Вам може бути корисною функція [[/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Значення функцій

Функції - це теж значення. Їх можна передавати так само, як і інші значення.

Значення функції можуть використовуватися як аргументи функції та як значення, що повертаються.

.play moretypes/function-values.go

* Закриття функцій (англ. function closures)

Функції в Go можуть бути закриттями. Закриття - це значення функції, яке посилається на змінні ззовні її тіла. Функція може отримувати доступ до змінних, на які вона посилається, і присвоювати їм значення; в цьому сенсі функція "прив'язана" до змінних.

Наприклад, функція `adder` повертає замикання. Кожне закриття пов'язане з власною змінною `sum`.

.play moretypes/function-closures.go

* Вправа: Замикання Фібоначчі

Нумо пограємось з функціями.

Реалізуйте функцію `fibonacci`, яка повертає функцію (замикання), що 
повертає послідовні [[https://en.wikipedia.org/wiki/Fibonacci_number][числа Фібоначчі]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Вітаємо!

Ви закінчили цей урок!

Ви можете повернутись назад до списку [[/tour/list][модулів]] щоб вибрати що вчити далі, або продовдити навчання з [[javascript:click('.next-page')][наступним уроком]].

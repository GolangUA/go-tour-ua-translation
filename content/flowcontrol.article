Керування потоком: `for`, `if`, `else`, `switch` та `defer`
Навчіться керувати потоком свого коду за допомогою умовних операторів, циклів, перемикачів та відкладених викликів.

Автори мови Go
https://golang.org

* Оператор `for`

У мові є Go тільки одна конструкція циклу - `for`.

Основний цикл `for` має три компоненти, розділені крапкою з комою:

- оператор ініціалізації (англ. init statement): виконується перед першою ітерацією
- умовний вираз (англ. condition expression): оцінюється перед кожною ітерацією
- пост-оператор (англ. post statement): виконується в кінці кожної ітерації

Оператор ініціалізації часто буде коротким оператором оголошення змінної,
а змінні, оголошені тут, будуть видимі тільки в області дії оператора `for`.

Цикл завершується, коли логічна умова оцінюється як `false`.

*Примітка*: На відміну від інших мов програмування, таких як С, Java або JavaScript,
в мові Go немає дужок навколо трьох компонентів оператора `for`, проте фігурні дужки `{}` завжди обов'язкові.

.play flowcontrol/for.go

* Продовження циклу `for`

Оператори ініціалізації та пост-оператор є необов'язковими.

.play flowcontrol/for-continued.go

* For в Go як "while"
В цьому випадку можна пропустити крапки з комою: цикл "while" в С записується так, як цикл `for` в Go.

.play flowcontrol/for-is-gos-while.go

* Нескінченний цикл
Якщо ви пропустите умову циклу, він буде нескінченним. Такий цикл зручно виражається в одному рядку.

.play flowcontrol/forever.go

* Оператор `if`
У мові Go оператор `if` подібний до циклу `for`: вираз не обов'язково має бути оточений дужками `()`,
але фігурні дужки `{}` обов'язкові.

.play flowcontrol/if.go

* Оператор `if` з коротким виразом
Як і в циклі `for`, в операторі `if` можна починати з короткого виразу, котрий буде виконаний перед умовою.

Змінні, оголошені в цьому операторі, є доступними тільки до кінця області видимості оператора `if`.

(Спробуйте використати `v` у останньому операторі `return`.)

.play flowcontrol/if-with-a-short-statement.go

* Оператори `if` та `else`

Змінні, оголошені в операторі `if` з коротким виразом, також доступні в будь-якому блоку `else`.

(Обидва виклики `pow` повертають свої результати до виклику `fmt.Println` в `main`.)

.play flowcontrol/if-and-else.go

* Вправа: цикли та функції

Як спосіб попрактикуватись з функціями та циклами, давайте реалізуємо функцію квадратного кореня:
задане число `x` ми хочемо знайти число `z`, для якого `z²` максимально наближене до `x`.

Комп'ютери зазвичай обчислюють квадратний корінь з числа `x` за допомогою циклу.
Починаючи з деякої приблизної величини `z`, ми можемо коригувати `z` на основі того, наскільки близько `z²` до `x`,
що дає кращу приблизну величину:

	z -= (z*z - x) / (2*z)

Повторення цієї операції робить вгадування кращим і кращим,
доки ми не досягнемо відповіді, яка найбільш наближена до фактичного квадратного кореня.

Реалізуйте це в `func Sqrt`, який наведено.
Приблизне значення `z` для початку буде 1, незалежно від введеного числа.
Для початку, повторіть обчислення 10 разів друкуючи кожен крок зміни `z`.
Подивіться, наскільки близько ви отримали відповідь для різних значень `x (1, 2, 3, ...)` і як швидко покращується вгадування.

Підказка: Для оголошення та ініціалізації дійсного числа,
надайте йому синтаксис дійсного числа або використовуйте конвертацію:

	z := 1.0
	z := float64(1)

Далі змініть умову циклу, щоб зупинитися, якщо значення перестало змінюватися
(або змінюється тільки на дуже малу величину).
Перевірте, чи це більше або менше 10 ітерацій.
Спробуйте інші початкові вгадування для `z`, такі як `x` або `x/2`.
Яка точність ваших результатів функції порівняно з [[/pkg/math/#Sqrt][math.Sqrt]] в стандартній бібліотеці?

(*Примітка*: Якщо ви зацікавлені у деталях алгоритму, то `z² - x` вище
показує, наскільки віддалене `z²` від того місця, де воно повинно бути (x), а ділення на `2z` є похідною
від `z²`, щоб масштабувати, наскільки ми коригуємо z залежно від того, наскільки швидко змінюється `z²`.
Цей загальний підхід називається [[https://en.wikipedia.org/wiki/Newton%27s_method][методом Ньютона]].
Він добре працює для багатьох функцій, але особливо добре підходить для квадратного кореня.)

.play flowcontrol/exercise-loops-and-functions.go

* Перемикач (англ. switch)

Оператор `switch` є скороченою формою для написання послідовності операторів `if-else`.
Він виконує перший варіант, котре значення дорівнює значенню умови.

Оператор `switch` у Go схожий на той, що використовується у мовах програмування C, C++, Java, JavaScript та PHP,
за винятком того, що в Go виконується лише вибраний варіант, а не всі варіанти, що йдуть після обраного.
При цьому, в Go оператор `break`, який необхідний в кінці кожного варіанту у тих мовах програмування, автоматично надається.
Ще однією важливою відмінністю в Go є те, що варіанти оператора `switch` не обов'язково мають бути константами,
а значення, що використовуються, не обов'язково є цілими числами.

.play flowcontrol/switch.go

* Порядок перевірки варіантів `switch`

Варіанти оператора `switch` оцінюються зверху донизу, зупиняючись на першому варіанті, який дорівнює значенню умови.

(Наприклад,

	switch i {
	case 0:
	case f():
	}

не викликає `f`, якщо `i==0`.)

#appengine: *Примітка*: Час у середовищі Go Playground завжди починається з `2009-11-10 23:00:00 UTC`
#appengine: Знаходження сенсу цього значення залишається вправою для читача.

.play flowcontrol/switch-evaluation-order.go

* Перемикач без умови

Оператор `switch` без умови є тим же самим, що й `switch`true`.

Ця конструкція може бути більш простим способом написання довгих ланцюгів `if-then-else`.

.play flowcontrol/switch-with-no-condition.go

* Відкладені виклики (англ. defer)

Оператор `defer` відкладає виконання функції до тих пір, поки оточуюча функція не повертає значення.

Аргументи виклику, який відкладається, обчислюються негайно, але виклик функції не виконується, доки не повертається значення з оточуючої функції.

.play flowcontrol/defer.go

* Складування defer

Виклики відкладених функцій додаються на стек. При поверненні з функції, відкладені виклики виконуються у порядку "останній прийшов - перший пішов".

Щоб дізнатися більше про оператор `defer`,
прочитайте цей [[/blog/defer-panic-and-recover][блог пост]].

.play flowcontrol/defer-multi.go

* Вітаємо!

Ви завершили цей урок!

Ви можете повернутися до списку [[/tour/list][модулів]], щоб дізнатися, що вивчати далі, або продовжити з [[javascript:click('.next-page')][наступним уроком]].
